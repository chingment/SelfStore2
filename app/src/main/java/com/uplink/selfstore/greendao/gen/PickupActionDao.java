package com.uplink.selfstore.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uplink.selfstore.daoBean.PickupAction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PICKUP_ACTION".
*/
public class PickupActionDao extends AbstractDao<PickupAction, Long> {

    public static final String TABLENAME = "PICKUP_ACTION";

    /**
     * Properties of entity PickupAction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property OrderId = new Property(1, String.class, "orderId", false, "ORDER_ID");
        public final static Property UniqueId = new Property(2, String.class, "uniqueId", false, "UNIQUE_ID");
        public final static Property ProductSkuId = new Property(3, String.class, "productSkuId", false, "PRODUCT_SKU_ID");
        public final static Property CabinetId = new Property(4, String.class, "cabinetId", false, "CABINET_ID");
        public final static Property SlotId = new Property(5, String.class, "slotId", false, "SLOT_ID");
        public final static Property PickupStatus = new Property(6, int.class, "pickupStatus", false, "PICKUP_STATUS");
        public final static Property ActionId = new Property(7, String.class, "actionId", false, "ACTION_ID");
        public final static Property ActionName = new Property(8, String.class, "actionName", false, "ACTION_NAME");
        public final static Property ActionStatusCode = new Property(9, int.class, "actionStatusCode", false, "ACTION_STATUS_CODE");
        public final static Property ActionStatusName = new Property(10, String.class, "actionStatusName", false, "ACTION_STATUS_NAME");
        public final static Property PickupUseTime = new Property(11, long.class, "pickupUseTime", false, "PICKUP_USE_TIME");
        public final static Property ImgId = new Property(12, String.class, "imgId", false, "IMG_ID");
        public final static Property ImgId2 = new Property(13, String.class, "imgId2", false, "IMG_ID2");
        public final static Property Remark = new Property(14, String.class, "remark", false, "REMARK");
    }


    public PickupActionDao(DaoConfig config) {
        super(config);
    }
    
    public PickupActionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PICKUP_ACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ORDER_ID\" TEXT," + // 1: orderId
                "\"UNIQUE_ID\" TEXT," + // 2: uniqueId
                "\"PRODUCT_SKU_ID\" TEXT," + // 3: productSkuId
                "\"CABINET_ID\" TEXT," + // 4: cabinetId
                "\"SLOT_ID\" TEXT," + // 5: slotId
                "\"PICKUP_STATUS\" INTEGER NOT NULL ," + // 6: pickupStatus
                "\"ACTION_ID\" TEXT," + // 7: actionId
                "\"ACTION_NAME\" TEXT," + // 8: actionName
                "\"ACTION_STATUS_CODE\" INTEGER NOT NULL ," + // 9: actionStatusCode
                "\"ACTION_STATUS_NAME\" TEXT," + // 10: actionStatusName
                "\"PICKUP_USE_TIME\" INTEGER NOT NULL ," + // 11: pickupUseTime
                "\"IMG_ID\" TEXT," + // 12: imgId
                "\"IMG_ID2\" TEXT," + // 13: imgId2
                "\"REMARK\" TEXT);"); // 14: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICKUP_ACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PickupAction entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(3, uniqueId);
        }
 
        String productSkuId = entity.getProductSkuId();
        if (productSkuId != null) {
            stmt.bindString(4, productSkuId);
        }
 
        String cabinetId = entity.getCabinetId();
        if (cabinetId != null) {
            stmt.bindString(5, cabinetId);
        }
 
        String slotId = entity.getSlotId();
        if (slotId != null) {
            stmt.bindString(6, slotId);
        }
        stmt.bindLong(7, entity.getPickupStatus());
 
        String actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindString(8, actionId);
        }
 
        String actionName = entity.getActionName();
        if (actionName != null) {
            stmt.bindString(9, actionName);
        }
        stmt.bindLong(10, entity.getActionStatusCode());
 
        String actionStatusName = entity.getActionStatusName();
        if (actionStatusName != null) {
            stmt.bindString(11, actionStatusName);
        }
        stmt.bindLong(12, entity.getPickupUseTime());
 
        String imgId = entity.getImgId();
        if (imgId != null) {
            stmt.bindString(13, imgId);
        }
 
        String imgId2 = entity.getImgId2();
        if (imgId2 != null) {
            stmt.bindString(14, imgId2);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(15, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PickupAction entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(3, uniqueId);
        }
 
        String productSkuId = entity.getProductSkuId();
        if (productSkuId != null) {
            stmt.bindString(4, productSkuId);
        }
 
        String cabinetId = entity.getCabinetId();
        if (cabinetId != null) {
            stmt.bindString(5, cabinetId);
        }
 
        String slotId = entity.getSlotId();
        if (slotId != null) {
            stmt.bindString(6, slotId);
        }
        stmt.bindLong(7, entity.getPickupStatus());
 
        String actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindString(8, actionId);
        }
 
        String actionName = entity.getActionName();
        if (actionName != null) {
            stmt.bindString(9, actionName);
        }
        stmt.bindLong(10, entity.getActionStatusCode());
 
        String actionStatusName = entity.getActionStatusName();
        if (actionStatusName != null) {
            stmt.bindString(11, actionStatusName);
        }
        stmt.bindLong(12, entity.getPickupUseTime());
 
        String imgId = entity.getImgId();
        if (imgId != null) {
            stmt.bindString(13, imgId);
        }
 
        String imgId2 = entity.getImgId2();
        if (imgId2 != null) {
            stmt.bindString(14, imgId2);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(15, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PickupAction readEntity(Cursor cursor, int offset) {
        PickupAction entity = new PickupAction( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uniqueId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productSkuId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cabinetId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // slotId
            cursor.getInt(offset + 6), // pickupStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // actionId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // actionName
            cursor.getInt(offset + 9), // actionStatusCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // actionStatusName
            cursor.getLong(offset + 11), // pickupUseTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imgId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // imgId2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PickupAction entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setOrderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUniqueId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductSkuId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCabinetId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSlotId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPickupStatus(cursor.getInt(offset + 6));
        entity.setActionId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActionName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setActionStatusCode(cursor.getInt(offset + 9));
        entity.setActionStatusName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPickupUseTime(cursor.getLong(offset + 11));
        entity.setImgId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImgId2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRemark(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PickupAction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PickupAction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PickupAction entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
